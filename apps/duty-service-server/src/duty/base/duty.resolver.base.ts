/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Duty } from "./Duty";
import { DutyCountArgs } from "./DutyCountArgs";
import { DutyFindManyArgs } from "./DutyFindManyArgs";
import { DutyFindUniqueArgs } from "./DutyFindUniqueArgs";
import { CreateDutyArgs } from "./CreateDutyArgs";
import { UpdateDutyArgs } from "./UpdateDutyArgs";
import { DeleteDutyArgs } from "./DeleteDutyArgs";
import { DutyService } from "../duty.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Duty)
export class DutyResolverBase {
  constructor(
    protected readonly service: DutyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Duty",
    action: "read",
    possession: "any",
  })
  async _dutiesMeta(
    @graphql.Args() args: DutyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Duty])
  @nestAccessControl.UseRoles({
    resource: "Duty",
    action: "read",
    possession: "any",
  })
  async duties(@graphql.Args() args: DutyFindManyArgs): Promise<Duty[]> {
    return this.service.duties(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Duty, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Duty",
    action: "read",
    possession: "own",
  })
  async duty(@graphql.Args() args: DutyFindUniqueArgs): Promise<Duty | null> {
    const result = await this.service.duty(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Duty)
  @nestAccessControl.UseRoles({
    resource: "Duty",
    action: "create",
    possession: "any",
  })
  async createDuty(@graphql.Args() args: CreateDutyArgs): Promise<Duty> {
    return await this.service.createDuty({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Duty)
  @nestAccessControl.UseRoles({
    resource: "Duty",
    action: "update",
    possession: "any",
  })
  async updateDuty(@graphql.Args() args: UpdateDutyArgs): Promise<Duty | null> {
    try {
      return await this.service.updateDuty({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Duty)
  @nestAccessControl.UseRoles({
    resource: "Duty",
    action: "delete",
    possession: "any",
  })
  async deleteDuty(@graphql.Args() args: DeleteDutyArgs): Promise<Duty | null> {
    try {
      return await this.service.deleteDuty(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
